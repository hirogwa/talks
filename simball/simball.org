#+TITLE: Emacs - Practical Introduction to the Adictive Editor
#+AUTHOR: Hiroki Nakagawa

* HELLO!

* BACKGROUND

** about this talk

*** What is Emacs?

[[http://en.wikipedia.org/wiki/Emacs][Emacs - Wikipedia]]

"Emacs /ˈiːmæks/ and its derivatives are a family of text editors
 that are characterized by their extensibility"

This talk is about my playing with Emacs for about two weeks.

*** Why?

- "looks cool"
- "good engineers use it"
- "not an editor but an environment?"
- "programmable editor?"

*** Who?

** editors and you

What editors/IDEs do you use?

[[http://www.google.ca/trends/explore#q%3D%252Fm%252F01yp0m%252C%2520%252Fm%252F07zh7%252C%2520%252Fm%252F0b6h18n%252C%2520%252Fm%252F0_x5x3g&cmpt%3Dq][trends 1]]

[[http://www.google.ca/trends/explore#q%3D%252Fm%252F01yp0m%252C%2520%252Fm%252F07zh7%252C%2520%252Fm%252F0b6h18n%252C%2520%252Fm%252F01fs1d%252C%2520%252Fm%252F01r_y0&cmpt%3Dq][trends 2]]

* GETTING STARTED WITH EMACS

** navigation

- no Vim-like mode

- naviate Emacs way

C: control
M: "meta" (alt/option)

C-n, C-p, C-f, C-b
C-a, C-e
C-d

C-v, M-v
M-<, M->

C-a C-k
C-a C-space C-e M-w ... C-y
C-a C-space C-n M-w ... C-y

C-x u

C-x C-f
C-x s

** more operations

- help
C-h k

- buffers
C-x C-b
C-x b
C-x k

- windows
C-x o
C-x 2
C-x 3

** emergency calls

- windows
C-x 1

- command
C-g

* MODE

** major mode

.txt .py .cpp .java .org ...

- "specialized facilities for working on a particular file type"
- "mutually exclusive"

** minor mode

- "optional features which you can turn on or off"
- "not necessarily specific to a type of file or buffer"

find, write, use minor modes ⊂ customizing Emacs

** using mode 1/5 - built-in modes

*** example: switching between major modes

introducing M-x

C-h k M-x

M-x python-mode
M-x c-mode
M-x text-mode

*** example: org mode (major)

"personal information management and outlining tool for Emacs"

[[http://orgmode.org/][org mode]]

task management
- org-todo (C-c C-t)
- org-agenda L
- org-schedule (C-c C-s)

export

*** example: ido mode (minor)

[[http://www.emacswiki.org/InteractivelyDoThings][Interactively Do Things]]

M-x ido-mode

try C-x b, C-x C-f, ...

*** example: whitespace mode (minor)

[[http://www.emacswiki.org/emacs/WhiteSpace][White Space]]

M-x whitespace-mode

** using mode 2/5 - global setting at startup

introducing ~/.emacs.d/init.el
turn on ido-mode globally

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

restart and see what happens

** using mode 3/5 - adding package

*** introducing C-h f and C-x C-b

what are they?

revisit...
- python-mode
- ido-mode
- whitespace-mode

*** example: nlinum (minor)

M-x package-list-package

"show line numbers in the margin"

[[http://elpa.gnu.org/packages/nlinum.html][nlinum]]

M-x nlinum-mode

** using mode 4/5 - external package

*** example: org-tree-slide-mode (minor)

"org buffer as a slide"

[[https://github.com/takaxp/org-tree-slide][org-tree-slide (GitHub repo)]]

M-x package-list-packge?

revisit nlinum
- where is it installed?
- introducing C-h v
- load-path

installation steps
- get source
- add load-path
- require

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/org-tree-slide/")
(require 'org-tree-slide)
#+END_SRC

M-x org-tree-slide-mode

** using mode 5/5 - package manager

notice the annoyance

introducing [[http://melpa.org][MELPA]]

*** example: highlight-current-line

[[http://melpa.org/#/highlight-current-line][highlight-current-line]]

M-x package-list-package

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(let ((default-directory "~/.emacs.d/elpa/"))
  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

M-x package-list-package

#+BEGIN_SRC emacs-lisp
(require 'highlight-current-line)
(global-hl-line-mode t)
#+END_SRC

*** example: color-theme

[[http://melpa.org/#/color-theme][color-theme]]

#+BEGIN_SRC emacs-lisp
(require 'color-theme)
(color-theme-initialize)
(setq color-theme-is-global t)
(color-theme-subtle-hacker)
#+END_SRC

* MORE CUSTOMIZING FOR REAL SCENARIOS

** general programming

*** nlinum revisited

make it global

#+BEGIN_SRC emacs-lisp
(require 'nlinum)
(global-nlinum-mode 1)
#+END_SRC

*** whitespace-mode revisited

make it global

#+BEGIN_SRC emacs-lisp
(global-whitespace-mode 1)
(setq whitespace-style (quote (face trailing tabs lines)))
#+END_SRC

auto delete at save

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook (lambda() (untabify (point-min) (point-max))))
#+END_SRC

*** auto-complete

"The most intelligent auto-completion extension for GNU Emacs"

[[http://cx4a.org/software/auto-complete/][Auto Complete Mode]]

[[http://melpa.org/#/auto-complete][auto-complete (MELPA)]]

- install
- make it global

#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(global-auto-complete-mode t)
#+END_SRC

** TODO Python

* MANAGE YOUR PACKAGES BETTER

** TODO modularizing init files
** TODO exporting and syncing configuration

* CONCLUSION AND FINAL THOUGHTS

** thoughts on why and why not

*** power of extensibility

*** we work in teams

*** "there must be something"

[[https://twitter.com/yukihiro_matz/status/539596365865578496][matz (Yukihiro Matsumoto) on twitter]]

[[http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life][matz (Yukihiro Matsumoto) on slideshare]]

"Emacs..."
- "taught me freedom for software"
- "taught me how to read code"
- "raught me power of Lisp"
- "made me a hacker"

* THANK YOU!
